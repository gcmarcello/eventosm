// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), unaccent(map: "unaccent", schema: "extensions")]
  schemas    = ["extensions", "geo", "public", "colors"]
}

generator json {
  provider = "prisma-json-types-generator"
}

model User {
  id                    String                 @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  fullName              String
  email                 String                 @unique
  document              String                 @unique
  phone                 String
  password              String?
  role                  String
  info                  UserInfo               @relation(fields: [infoId], references: [id])
  infoId                String                 @unique @db.Uuid
  Organization          Organization[]
  EventRegistration     EventRegistration[]
  Team                  Team[]
  TeamOwnership         Team[]                 @relation(name: "teamOwner")
  UserOrgLink           UserOrgLink[]
  PasswordRecoveryToken PasswordRecoveryToken?
  confirmed             Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime?              @updatedAt
  UserDocument          UserDocument[]
  EventCheckIn          EventCheckIn[]

  @@schema("public")
}

model PasswordRecoveryToken {
  id             String        @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  token          String        @unique
  user           User          @relation(fields: [userId], references: [id])
  userId         String        @unique @db.Uuid
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.Uuid
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt

  @@schema("public")
}

model UserOrgLink {
  id             String            @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  user           User              @relation(fields: [userId], references: [id])
  userId         String            @db.Uuid
  role           OrganizationRole? @relation(fields: [roleId], references: [id])
  roleId         String?           @db.Uuid
  Organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId String            @db.Uuid
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt

  @@unique([userId, organizationId])
  @@schema("public")
}

model UserInfo {
  id         String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  user       User?
  birthDate  DateTime
  gender     Gender
  zipCode    String
  state      State?    @relation(fields: [stateId], references: [id])
  stateId    String?
  city       City?     @relation(fields: [cityId], references: [id])
  cityId     String?
  address    String?
  number     String?
  complement String?
  support    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@schema("public")
}

enum UserDocumentType {
  disability
  physicalAptitude
  minorAuthorization

  @@schema("public")
}

model UserDocument {
  id        String           @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @db.Uuid
  type      UserDocumentType
  name      String?
  key       String
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt

  @@schema("public")
}

model Organization {
  id                    String                  @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                  String
  email                 String
  phone                 String?
  owner                 User                    @relation(fields: [ownerId], references: [id])
  ownerId               String                  @db.Uuid
  document              String?                 @unique
  slug                  String                  @unique
  /// [OrganizationOptions]
  options               Json                    @db.JsonB
  abbreviation          String
  Event                 Event[]
  EventGroup            EventGroup[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime?               @updatedAt
  OrgCustomDomain       OrgCustomDomain[]
  UserOrgLink           UserOrgLink[]
  PasswordRecoveryToken PasswordRecoveryToken[]
  News                  News[]
  Team                  Team[]
  OrganizationRole      OrganizationRole[]
  OrganizationDocument  OrganizationDocument[]

  @@schema("public")
}

model OrganizationRole {
  id                         String                       @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                       String
  Organization               Organization                 @relation(fields: [organizationId], references: [id])
  organizationId             String                       @db.Uuid
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime?                    @updatedAt
  OrganizationRolePermission OrganizationRolePermission[]
  UserOrgLink                UserOrgLink[]

  @@schema("public")
}

model OrganizationPermission {
  id                         String                       @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                       String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime?                    @updatedAt
  OrganizationRolePermission OrganizationRolePermission[]

  @@schema("public")
}

model OrganizationRolePermission {
  id           String                 @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  role         OrganizationRole       @relation(fields: [roleId], references: [id])
  roleId       String                 @db.Uuid
  permission   OrganizationPermission @relation(fields: [permissionId], references: [id])
  permissionId String                 @db.Uuid
  createdAt    DateTime               @default(now())
  updatedAt    DateTime?              @updatedAt

  @@schema("public")
}

enum OrganizationDocumentType {
  general
  bid

  @@schema("public")
}

enum OrganizationDocumentStatus {
  published
  draft

  @@schema("public")
}

model OrganizationDocument {
  id             String                     @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  organization   Organization               @relation(fields: [organizationId], references: [id])
  organizationId String                     @db.Uuid
  type           OrganizationDocumentType
  name           String
  description    String?
  key            String
  status         OrganizationDocumentStatus @default(draft)
  highlight      Boolean                    @default(false) @db.Boolean
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime?                  @updatedAt

  @@schema("public")
}

enum EventGroupType {
  championship
  free

  @@schema("public")
}

enum EventGroupResultType {
  time
  points

  @@schema("public")
}

enum EventRegistrationType {
  individual
  team
  mixed

  @@schema("public")
}

enum EventGroupMode {
  league
  cup

  @@schema("public")
}

enum EventGroupScoreCalculation {
  sum
  average

  @@schema("public")
}

model EventGroupRules {
  eventGroupId        String                      @unique @db.Uuid
  eventGroup          EventGroup                  @relation(fields: [eventGroupId], references: [id])
  resultType          EventGroupResultType
  mode                EventGroupMode
  groupStage          Boolean?
  groupSize           Int?
  scoreCalculation    EventGroupScoreCalculation?
  pointsAwarded       Json?
  discard             Int?
  justifiedAbsences   Int?
  unjustifiedAbsences Int?

  @@schema("public")
}

model EventGroup {
  id                     String                   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                   String
  slug                   String                   @unique
  imageUrl               String?
  status                 EventStatus              @default(draft)
  Event                  Event[]
  registrationType       EventRegistrationType
  eventGroupType         EventGroupType
  Organization           Organization             @relation(fields: [organizationId], references: [id])
  organizationId         String                   @db.Uuid
  location               String?
  rules                  String?
  description            String?
  details                String?
  /// [EventGroupOptions]
  options                Json?                    @db.JsonB
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?                @updatedAt
  EventGroupRules        EventGroupRules?
  EventModality          EventModality[]
  EventRegistrationBatch EventRegistrationBatch[]
  EventAddon             EventAddon[]
  EventRegistration      EventRegistration[]

  @@schema("public")
}

model EventModality {
  id                String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name              String
  event             Event?              @relation(fields: [eventId], references: [id])
  eventId           String?             @db.Uuid
  eventGroup        EventGroup?         @relation(fields: [eventGroupId], references: [id])
  eventGroupId      String?             @db.Uuid
  modalityCategory  ModalityCategory[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  deletedAt         DateTime?
  CategoryBatch     CategoryBatch[]
  EventRegistration EventRegistration[]
  ModalityBatch     ModalityBatch[]

  @@schema("public")
}

enum EventResultStatus {
  active
  suspended
  cancelled

  @@schema("public")
}

model EventResult {
  id             String            @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  Registration   EventRegistration @relation(fields: [registrationId], references: [id])
  registrationId String            @db.Uuid
  Event          Event             @relation(fields: [eventId], references: [id])
  eventId        String            @db.Uuid
  score          Int?
  observation    String?
  status         EventResultStatus @default(active)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt

  @@schema("public")
}

enum Gender {
  female
  male

  @@schema("public")
}

enum CategoryGenders {
  female
  male
  unisex

  @@schema("public")
}

model ModalityCategory {
  id                String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name              String
  minAge            Int
  maxAge            Int
  gender            CategoryGenders?
  EventModality     EventModality       @relation(fields: [eventModalityId], references: [id])
  eventModalityId   String              @db.Uuid
  teamSize          Int?                @default(1) @db.Integer
  CategoryBatch     CategoryBatch[]
  EventRegistration EventRegistration[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt

  @@schema("public")
}

model EventRegistrationBatch {
  id                        String                @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                      String?
  event                     Event?                @relation(fields: [eventId], references: [id])
  eventId                   String?               @db.Uuid
  eventGroup                EventGroup?           @relation(fields: [eventGroupId], references: [id])
  eventGroupId              String?               @db.Uuid
  coupon                    BatchCoupon[]
  registrationType          EventRegistrationType
  maxRegistrations          Int
  dateStart                 DateTime
  dateEnd                   DateTime
  price                     Float
  multipleRegistrationLimit Int?                  @db.Integer
  protectedBatch            Boolean               @default(false) @db.Boolean
  categoryControl           Boolean               @default(false) @db.Boolean
  modalityControl           Boolean               @default(false) @db.Boolean
  EventRegistration         EventRegistration[]
  CategoryBatch             CategoryBatch[]
  ModalityBatch             ModalityBatch[]
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime?             @updatedAt

  @@schema("public")
}

model CategoryBatch {
  id               String                 @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  batchId          String                 @db.Uuid
  Batch            EventRegistrationBatch @relation(fields: [batchId], references: [id])
  categoryId       String                 @db.Uuid
  category         ModalityCategory       @relation(fields: [categoryId], references: [id])
  modality         EventModality          @relation(fields: [modalityId], references: [id])
  modalityId       String                 @db.Uuid
  price            Float?
  maxRegistrations Int?                   @db.Integer
  createdAt        DateTime               @default(now())
  updatedAt        DateTime?              @updatedAt

  @@schema("public")
}

model ModalityBatch {
  id               String                 @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  batchId          String                 @db.Uuid
  Batch            EventRegistrationBatch @relation(fields: [batchId], references: [id])
  modalityId       String                 @db.Uuid
  modality         EventModality          @relation(fields: [modalityId], references: [id])
  price            Float?
  maxRegistrations Int?                   @db.Integer
  createdAt        DateTime               @default(now())
  updatedAt        DateTime?              @updatedAt

  @@schema("public")
}

model EventAddon {
  id                String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name              String
  image             String?
  options           Json?               @db.JsonB
  description       String?
  price             Float
  eventId           String?             @db.Uuid
  status            ProductStatus
  Event             Event?              @relation(fields: [eventId], references: [id])
  eventGroup        EventGroup?         @relation(fields: [eventGroupId], references: [id])
  eventGroupId      String?             @db.Uuid
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  EventRegistration EventRegistration[]

  @@schema("public")
}

enum ProductStatus {
  active
  deleted
  inactive
  archived

  @@schema("public")
}

enum CouponType {
  percentage
  fixed

  @@schema("public")
}

model BatchCoupon {
  id                       String                 @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  slug                     String
  EventRegistrationBatch   EventRegistrationBatch @relation(fields: [eventRegistrationBatchId], references: [id])
  eventRegistrationBatchId String                 @db.Uuid
  maxUses                  Int
  type                     CouponType
  overruler                Boolean
  EventRegistration        EventRegistration[]
  createdAt                DateTime               @default(now())
  updatedAt                DateTime?              @updatedAt

  @@schema("public")
}

enum EventStatus {
  archived
  draft
  published
  cancelled
  review
  finished

  @@schema("public")
}

model Event {
  id                     String                   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                   String
  slug                   String                   @unique
  status                 EventStatus
  EventRegistration      EventRegistration[]
  EventGroup             EventGroup?              @relation(fields: [eventGroupId], references: [id])
  eventGroupId           String?                  @db.Uuid
  dateStart              DateTime
  dateEnd                DateTime
  location               String
  description            String?
  rules                  String?
  details                String?
  imageUrl               String?
  EventModality          EventModality[]
  EventRegistrationBatch EventRegistrationBatch[]
  Organization           Organization             @relation(fields: [organizationId], references: [id])
  organizationId         String                   @db.Uuid
  EventAddon             EventAddon[]
  /// [EventOptions]
  options                Json?                    @db.JsonB
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?                @updatedAt
  EventCheckIn           EventCheckIn[]
  EventAbsences          EventAbsences[]
  EventResults           EventResult[]

  @@schema("public")
}

enum EventRegistrationStatus {
  active
  pending
  cancelled
  suspended

  @@schema("public")
}

model EventRegistration {
  id                  String                  @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  code                String?                 @db.VarChar
  user                User                    @relation(fields: [userId], references: [id])
  userId              String                  @db.Uuid
  event               Event?                  @relation(fields: [eventId], references: [id])
  eventId             String?                 @db.Uuid
  eventGroup          EventGroup?             @relation(fields: [eventGroupId], references: [id])
  eventGroupId        String?                 @db.Uuid
  modality            EventModality?          @relation(fields: [modalityId], references: [id])
  modalityId          String?                 @db.Uuid
  category            ModalityCategory        @relation(fields: [categoryId], references: [id])
  categoryId          String                  @db.Uuid
  batch               EventRegistrationBatch  @relation(fields: [batchId], references: [id])
  batchId             String                  @db.Uuid
  coupon              BatchCoupon?            @relation(fields: [couponId], references: [id])
  couponId            String?                 @db.Uuid
  team                Team?                   @relation(fields: [teamId], references: [id])
  teamId              String?                 @db.Uuid
  addon               EventAddon?             @relation(fields: [addonId], references: [id])
  addonId             String?                 @db.Uuid
  addonOption         String?
  status              EventRegistrationStatus @default(pending)
  order               Order?                  @relation(fields: [orderId], references: [id])
  orderId             String?                 @db.Uuid
  qrCode              String
  justifiedAbsences   Int                     @default(0) @db.Integer
  unjustifiedAbsences Int                     @default(0) @db.Integer
  createdAt           DateTime                @default(now())
  updatedAt           DateTime?               @updatedAt
  EventCheckIn        EventCheckIn[]
  EventAbsences       EventAbsences[]
  EventResults        EventResult[]

  @@schema("public")
}

enum TeamStatus {
  active
  inactive
  deleted

  @@schema("public")
}

model Team {
  id                     String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                   String
  owner                  User                @relation(name: "teamOwner", fields: [ownerId], references: [id])
  ownerId                String              @db.Uuid
  User                   User[]
  originalOrganization   Organization?       @relation(fields: [originalOrganizationId], references: [id])
  originalOrganizationId String?             @db.Uuid
  status                 TeamStatus          @default(active)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime?           @updatedAt
  EventRegistration      EventRegistration[]

  @@schema("public")
}

model Order {
  id                String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  orderId           String              @db.VarChar
  status            OrderStatus
  type              OrderType
  EventRegistration EventRegistration[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt

  @@schema("public")
}

model EventCheckIn {
  id             String            @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  event          Event             @relation(fields: [eventId], references: [id])
  eventId        String            @db.Uuid
  registration   EventRegistration @relation(fields: [registrationId], references: [id])
  registrationId String            @db.Uuid
  createdBy      User              @relation(fields: [createdById], references: [id])
  createdById    String            @db.Uuid
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt

  @@schema("public")
}

enum EventAbsenceStatus {
  pending
  approved
  denied

  @@schema("public")
}

model EventAbsences {
  id               String             @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  event            Event              @relation(fields: [eventId], references: [id])
  eventId          String             @db.Uuid
  registration     EventRegistration  @relation(fields: [registrationId], references: [id])
  registrationId   String             @db.Uuid
  justificationUrl String?
  status           EventAbsenceStatus @default(pending)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt

  @@schema("public")
}

enum EventAbsenceJustificationStatus {
  pending
  approved
  denied

  @@schema("public")
}

model OrgCustomDomain {
  id             String       @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  domain         String       @unique
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.Uuid

  @@schema("public")
}

model News {
  id             String        @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  title          String
  subtitle       String?
  content        String
  imageUrl       String?
  slug           String        @unique
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.Uuid
  status         NewsStatus    @default(draft)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt

  @@unique([slug, organizationId])
  @@schema("public")
}

enum NewsStatus {
  draft
  published
  archived

  @@schema("public")
}

enum OrderStatus {
  pending
  paid
  cancelled

  @@schema("public")
}

enum OrderType {
  eventRegistration

  @@schema("public")
}

model State {
  id       String     @id
  uf       String     @unique @db.VarChar
  name     String     @unique @db.VarChar
  UserInfo UserInfo[]
  City     City[]

  @@schema("geo")
}

model City {
  id       String     @id
  name     String     @db.VarChar
  state    State      @relation(fields: [stateId], references: [id])
  stateId  String
  UserInfo UserInfo[]

  @@schema("geo")
}

model Color {
  id  ColorId @id @unique
  /// [TailwindColor]
  tw  Json
  hex String
  rgb String?

  @@schema("colors")
}

enum ColorId {
  slate_50
  slate_100
  slate_200
  slate_300
  slate_400
  slate_500
  slate_600
  slate_700
  slate_800
  slate_900
  slate_950
  gray_50
  gray_100
  gray_200
  gray_300
  gray_400
  gray_500
  gray_600
  gray_700
  gray_800
  gray_900
  gray_950
  zinc_50
  zinc_100
  zinc_200
  zinc_300
  zinc_400
  zinc_500
  zinc_600
  zinc_700
  zinc_800
  zinc_900
  zinc_950
  neutral_50
  neutral_100
  neutral_200
  neutral_300
  neutral_400
  neutral_500
  neutral_600
  neutral_700
  neutral_800
  neutral_900
  neutral_950
  stone_50
  stone_100
  stone_200
  stone_300
  stone_400
  stone_500
  stone_600
  stone_700
  stone_800
  stone_900
  stone_950
  red_50
  red_100
  red_200
  red_300
  red_400
  red_500
  red_600
  red_700
  red_800
  red_900
  red_950
  orange_50
  orange_100
  orange_200
  orange_300
  orange_400
  orange_500
  orange_600
  orange_700
  orange_800
  orange_900
  orange_950
  amber_50
  amber_100
  amber_200
  amber_300
  amber_400
  amber_500
  amber_600
  amber_700
  amber_800
  amber_900
  amber_950
  yellow_50
  yellow_100
  yellow_200
  yellow_300
  yellow_400
  yellow_500
  yellow_600
  yellow_700
  yellow_800
  yellow_900
  yellow_950
  lime_50
  lime_100
  lime_200
  lime_300
  lime_400
  lime_500
  lime_600
  lime_700
  lime_800
  lime_900
  lime_950
  green_50
  green_100
  green_200
  green_300
  green_400
  green_500
  green_600
  green_700
  green_800
  green_900
  green_950
  emerald_50
  emerald_100
  emerald_200
  emerald_300
  emerald_400
  emerald_500
  emerald_600
  emerald_700
  emerald_800
  emerald_900
  emerald_950
  teal_50
  teal_100
  teal_200
  teal_300
  teal_400
  teal_500
  teal_600
  teal_700
  teal_800
  teal_900
  teal_950
  cyan_50
  cyan_100
  cyan_200
  cyan_300
  cyan_400
  cyan_500
  cyan_600
  cyan_700
  cyan_800
  cyan_900
  cyan_950
  sky_50
  sky_100
  sky_200
  sky_300
  sky_400
  sky_500
  sky_600
  sky_700
  sky_800
  sky_900
  sky_950
  blue_50
  blue_100
  blue_200
  blue_300
  blue_400
  blue_500
  blue_600
  blue_700
  blue_800
  blue_900
  blue_950
  indigo_50
  indigo_100
  indigo_200
  indigo_300
  indigo_400
  indigo_500
  indigo_600
  indigo_700
  indigo_800
  indigo_900
  indigo_950
  violet_50
  violet_100
  violet_200
  violet_300
  violet_400
  violet_500
  violet_600
  violet_700
  violet_800
  violet_900
  violet_950
  purple_50
  purple_100
  purple_200
  purple_300
  purple_400
  purple_500
  purple_600
  purple_700
  purple_800
  purple_900
  purple_950
  fuchsia_50
  fuchsia_100
  fuchsia_200
  fuchsia_300
  fuchsia_400
  fuchsia_500
  fuchsia_600
  fuchsia_700
  fuchsia_800
  fuchsia_900
  fuchsia_950
  pink_50
  pink_100
  pink_200
  pink_300
  pink_400
  pink_500
  pink_600
  pink_700
  pink_800
  pink_900
  pink_950
  rose_50
  rose_100
  rose_200
  rose_300
  rose_400
  rose_500
  rose_600
  rose_700
  rose_800
  rose_900
  rose_950
  black
  dark
  white
  dark_zinc
  dark_white

  @@schema("colors")
}
