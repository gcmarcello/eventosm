// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), unaccent(map: "unaccent", schema: "extensions")]
  schemas    = ["extensions", "geo", "public"]
}

model User {
  id                String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  fullName          String
  email             String              @unique
  document          String              @unique
  phone             String?             @unique
  password          String?
  role              String
  info              UserInfo            @relation(fields: [infoId], references: [id])
  infoId            String              @unique @db.Uuid
  Organization      Organization[]
  EventRegistration EventRegistration[]
  Team              Team[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  TeamOwnership     Team[]              @relation(name: "teamOwner")
  UserOrgLink       UserOrgLink[]

  @@schema("public")
}

model UserOrgLink {
  id             String       @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.Uuid
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.Uuid

  @@schema("public")
}

model UserInfo {
  id         String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  user       User?
  birthDate  DateTime
  gender     Gender
  zipCode    String
  state      State     @relation(fields: [stateId], references: [id])
  stateId    String
  city       City      @relation(fields: [cityId], references: [id])
  cityId     String
  address    String
  number     String
  complement String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@schema("public")
}

model Organization {
  id              String            @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name            String
  email           String
  phone           String?
  owner           User              @relation(fields: [ownerId], references: [id])
  ownerId         String            @db.Uuid
  document        String?           @unique
  slug            String            @unique
  domain          String?           @unique
  options         Json?             @db.JsonB
  Event           Event[]
  EventGroup      EventGroup[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  OrgCustomDomain OrgCustomDomain[]
  UserOrgLink     UserOrgLink[]

  @@schema("public")
}

enum EventGroupType {
  championship
  free

  @@schema("public")
}

enum EventGroupResultType {
  time
  points

  @@schema("public")
}

enum EventRegistrationType {
  individual
  team
  mixed

  @@schema("public")
}

enum EventGroupMode {
  league
  cup

  @@schema("public")
}

enum EventGroupScoreCalculation {
  sum
  average

  @@schema("public")
}

model EventGroupRules {
  eventGroupId        String                      @unique @db.Uuid
  eventGroup          EventGroup                  @relation(fields: [eventGroupId], references: [id])
  resultType          EventGroupResultType
  mode                EventGroupMode
  groupStage          Boolean?
  groupSize           Int?
  scoreCalculation    EventGroupScoreCalculation?
  pointsAwarded       Json?
  discard             Int?
  justifiedAbsences   Int?
  unjustifiedAbsences Int?

  @@schema("public")
}

model EventGroup {
  id                     String                   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                   String
  slug                   String                   @unique
  imageUrl               String?
  status                 EventStatus              @default(draft)
  Event                  Event[]
  registrationType       EventRegistrationType
  eventGroupType         EventGroupType
  Organization           Organization             @relation(fields: [organizationId], references: [id])
  organizationId         String                   @db.Uuid
  location               String?
  rules                  String?
  description            String?
  details                String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?                @updatedAt
  EventGroupRules        EventGroupRules?
  EventModality          EventModality[]
  EventRegistrationBatch EventRegistrationBatch[]
  EventAddon             EventAddon[]
  EventRegistration      EventRegistration[]

  @@schema("public")
}

model EventModality {
  id                String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name              String
  event             Event?              @relation(fields: [eventId], references: [id])
  eventId           String?             @db.Uuid
  eventGroup        EventGroup?         @relation(fields: [eventGroupId], references: [id])
  eventGroupId      String?             @db.Uuid
  modalityCategory  ModalityCategory[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  deletedAt         DateTime?
  CategoryBatch     CategoryBatch[]
  EventRegistration EventRegistration[]

  @@schema("public")
}

enum Gender {
  female
  male

  @@schema("public")
}

enum CategoryGenders {
  female
  male
  unisex

  @@schema("public")
}

model ModalityCategory {
  id                String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name              String
  minAge            Int
  maxAge            Int
  gender            CategoryGenders?
  EventModality     EventModality       @relation(fields: [eventModalityId], references: [id])
  eventModalityId   String              @db.Uuid
  teamSize          Int?                @default(1) @db.Integer
  CategoryBatch     CategoryBatch[]
  EventRegistration EventRegistration[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt

  @@schema("public")
}

model EventRegistrationBatch {
  id                String                @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name              String?
  event             Event?                @relation(fields: [eventId], references: [id])
  eventId           String?               @db.Uuid
  eventGroup        EventGroup?           @relation(fields: [eventGroupId], references: [id])
  eventGroupId      String?               @db.Uuid
  coupon            BatchCoupon[]
  registrationType  EventRegistrationType
  maxRegistrations  Int
  dateStart         DateTime
  dateEnd           DateTime
  price             Float
  categoryControl   Boolean               @default(false) @db.Boolean
  EventRegistration EventRegistration[]
  CategoryBatch     CategoryBatch[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime?             @updatedAt

  @@schema("public")
}

model CategoryBatch {
  id               String                 @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  batchId          String                 @db.Uuid
  Batch            EventRegistrationBatch @relation(fields: [batchId], references: [id])
  categoryId       String                 @db.Uuid
  category         ModalityCategory       @relation(fields: [categoryId], references: [id])
  modality         EventModality          @relation(fields: [modalityId], references: [id])
  modalityId       String                 @db.Uuid
  price            Float?
  maxRegistrations Int?                   @db.Integer
  createdAt        DateTime               @default(now())
  updatedAt        DateTime?              @updatedAt

  @@schema("public")
}

model EventAddon {
  id                String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name              String
  image             String?
  options           Json?               @db.JsonB
  description       String?
  price             Float
  eventId           String?             @db.Uuid
  Event             Event?              @relation(fields: [eventId], references: [id])
  eventGroup        EventGroup?         @relation(fields: [eventGroupId], references: [id])
  eventGroupId      String?             @db.Uuid
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  EventRegistration EventRegistration[]

  @@schema("public")
}

enum CouponType {
  percentage
  fixed

  @@schema("public")
}

model BatchCoupon {
  id                       String                 @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  slug                     String
  EventRegistrationBatch   EventRegistrationBatch @relation(fields: [eventRegistrationBatchId], references: [id])
  eventRegistrationBatchId String                 @db.Uuid
  maxUses                  Int
  type                     CouponType
  overruler                Boolean
  EventRegistration        EventRegistration[]
  createdAt                DateTime               @default(now())
  updatedAt                DateTime?              @updatedAt

  @@schema("public")
}

enum EventStatus {
  draft
  published
  review
  cancelled
  completed
  archived

  @@schema("public")
}

model Event {
  id                     String                   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                   String
  slug                   String                   @unique
  status                 EventStatus
  EventRegistration      EventRegistration[]
  EventGroup             EventGroup?              @relation(fields: [eventGroupId], references: [id])
  eventGroupId           String?                  @db.Uuid
  dateStart              DateTime
  dateEnd                DateTime
  location               String
  description            String?
  rules                  String?
  details                String?
  imageUrl               String?
  EventModality          EventModality[]
  EventRegistrationBatch EventRegistrationBatch[]
  Organization           Organization             @relation(fields: [organizationId], references: [id])
  organizationId         String                   @db.Uuid
  EventAddon             EventAddon[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?                @updatedAt
  EventCheckIn           EventCheckIn[]

  @@schema("public")
}

model EventRegistration {
  id                        String                      @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  code                      String                      @db.VarChar
  user                      User                        @relation(fields: [userId], references: [id])
  userId                    String                      @db.Uuid
  event                     Event?                      @relation(fields: [eventId], references: [id])
  eventId                   String?                     @db.Uuid
  eventGroup                EventGroup?                 @relation(fields: [eventGroupId], references: [id])
  eventGroupId              String?                     @db.Uuid
  modality                  EventModality?              @relation(fields: [modalityId], references: [id])
  modalityId                String?                     @db.Uuid
  category                  ModalityCategory            @relation(fields: [categoryId], references: [id])
  categoryId                String                      @db.Uuid
  batch                     EventRegistrationBatch      @relation(fields: [batchId], references: [id])
  batchId                   String                      @db.Uuid
  coupon                    BatchCoupon?                @relation(fields: [couponId], references: [id])
  couponId                  String?                     @db.Uuid
  team                      Team?                       @relation(fields: [teamId], references: [id])
  teamId                    String?                     @db.Uuid
  addon                     EventAddon?                 @relation(fields: [addonId], references: [id])
  addonId                   String?                     @db.Uuid
  addonOption               String?
  status                    String
  order                     Order?                      @relation(fields: [orderId], references: [id])
  orderId                   String?                     @db.Uuid
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime?                   @updatedAt
  EventAbsenceJustification EventAbsenceJustification[]
  EventCheckIn              EventCheckIn[]

  @@schema("public")
}

model Team {
  id                String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name              String
  owner             User                @relation(name: "teamOwner", fields: [ownerId], references: [id])
  ownerId           String              @db.Uuid
  User              User[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  EventRegistration EventRegistration[]

  @@schema("public")
}

model Order {
  id                String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  orderId           String              @db.VarChar
  status            OrderStatus
  type              OrderType
  EventRegistration EventRegistration[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt

  @@schema("public")
}

model EventCheckIn {
  id             String            @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  event          Event             @relation(fields: [eventId], references: [id])
  eventId        String            @db.Uuid
  registration   EventRegistration @relation(fields: [registrationId], references: [id])
  registrationId String            @db.Uuid
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt

  @@schema("public")
}

model EventAbsenceJustification {
  id                  String                          @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  eventRegistration   EventRegistration               @relation(fields: [eventRegistrationId], references: [id])
  eventRegistrationId String                          @db.Uuid
  justification       String
  status              EventAbsenceJustificationStatus
  createdAt           DateTime                        @default(now())
  updatedAt           DateTime?                       @updatedAt

  @@schema("public")
}

enum EventAbsenceJustificationStatus {
  pending
  approved
  denied

  @@schema("public")
}

model OrgCustomDomain {
  id             String       @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  domain         String       @unique
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.Uuid

  @@schema("public")
}

enum OrderStatus {
  pending
  paid
  cancelled

  @@schema("public")
}

enum OrderType {
  eventRegistration

  @@schema("public")
}

model State {
  id       String     @id
  uf       String     @unique @db.VarChar
  name     String     @unique @db.VarChar
  UserInfo UserInfo[]
  City     City[]

  @@schema("geo")
}

model City {
  id       String     @id
  name     String     @db.VarChar
  state    State      @relation(fields: [stateId], references: [id])
  stateId  String
  UserInfo UserInfo[]

  @@schema("geo")
}
